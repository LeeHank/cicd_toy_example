stages: # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

# 只有發生在 dev 這個分支上的 commit, 我才要動，不然都不動
workflow:
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - when: never

build-job: # This job runs in the build stage, which runs first.
  variables:
    my_name: "hahahahaha"
  stage: build
  tags:
    - shell
    - local-git-lab
  script:
    - echo "Hello! my name is $my_name"
    - echo "Compiling the code..."
    - echo "Compile complete."

unit-test-job: # This job runs in the test stage.
  stage: test # It only starts when the job in the build stage completes successfully.
  needs:
    - lint-test-job # need pass lint-test-job first
      # (when unit-test-job & lint-test-job are in the same stage)
  script:
    - echo "Running unit tests... This will take about 10 seconds."
    - sleep 10
    - echo "Code coverage is 90%"
  before_script:
    - echo "install packages"
    - echo "db connection setting"
  after_script:
    - echo "delete unnecessary files"

lint-test-job: # This job also runs in the test stage.
  stage: test # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - sleep 10
    - echo "No lint issues found."

deploy-job: # This job runs in the deploy stage.
  only:
    - master # only do this job when push/merge_request to main
  stage: deploy # It only runs when *both* jobs in the test stage complete successfully.
  environment: production
  script:
    - chmod +x ./deploy.sh # let deploy.sh file executable
    # 因為 deploy.sh 建立時的身份是 ubuntu,
    # 但 gitlab_runner 在跑時，他的身份不是 ubuntu, 而是 gitlab_runner
    # 所以如果不調整 ./deploy.sh 的權限的話，就會碰到 permission denied 的 error
    - ./deploy.sh # run current directory bash file
